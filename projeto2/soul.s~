.org 0x0
.section .iv, "a"

@vetor de interrupcoes
_start:

interrupt_vector:
.org 0x00
    b RESET_HANDLER

.org 0x08
    b SYSCALL_HANDLER

.org 0x18
    b IRQ_HANDLER

@definicoes de constantes
.text

@definicao do .text do modo USER (maior que 77802000 definido no Makefile)
.set USER_TEXT				0x77802500

@enderecos do GPT
.set GPT_BASE,              0x53FA0000
.set GPT_CR,                0x0
.set GPT_PR,                0x4
.set GPT_SR,                0x8
.set GPT_OCR1,              0x10
.set GPT_IR,                0xC

@constantes de clock
.set CLOCK_SRC,             0x41            @ enable clock
.set TIME_SZ,               100             @ clock cycling (1ms)
.set CLOCK_WAIT,            200

@enderecos do TZIC
.set TZIC_BASE,             0x0FFFC000
.set TZIC_INTCTRL,          0x0
.set TZIC_INTSEC1,          0x84
.set TZIC_ENSET1,           0x104
.set TZIC_PRIOMASK,         0xC
.set TZIC_PRIORITY9,        0x424

@enderecos do GPIO
.set GPIO_BASE,             0x53F84000
.set GPIO_DR,               0x0
.set GPIO_GDIR,             0x4
.set GPIO_PSR,              0x8
@mascara de GDIR (0 = entrada 1 = saida)
.set GDIR_MASK,             0b11111111111111000000000000111110


@constantes
.set MAX_CALLBACKS,         8
.set MAX_ALARMS,            8



.text


RESET_HANDLER:

	@seta o endereco vetor de interrupcao no coprocessador 15
	ldr r0, =interrupt_vector
	mcr p15, 0, r0, c12, c0, 0

	mov r1, #0
	@reseta sys_time
	ldr r0, =sys_time
	str r1, [r0]

	@reseta alarmes
	ldr r0, =alarms
	str r1, [r0]

	@resetal call_backs
	ldr r0, =call_backs
	str r1, [r0]


SET_GPT:
	@ Constantes para os enderecos de GPT

	.set TIME_SZ,  100

	ldr r1, =GPT_BASE

	@ Habilita e configura o clock_src para perif√©rico
	mov r0, #0x41
	str r0, [r1, #GPT_CR]

	@ Zera o prescaler
	mov r0, #0
	str r0, [r1, #GPT_PR]

	@ Coloca em GPT_OCR1 o valor que eu desejo contar (100)
	mov r0, #100
	str r0, [r1, #GPT_OCR1]

	@ Habilita interrupcao Output Compare Channel 1
	mov r0, #1
	str r0, [r1, #GPT_IR]

	mov pc, lr


SET_TZIC:

	@ Liga o controlador de interrupcoes
    @ R1 <= TZIC_BASE

    ldr	r1, =TZIC_BASE

    @ Configura interrupcao 39 do GPT como nao segura
    mov	r0, #(1 << 7)
    str	r0, [r1, #TZIC_INTSEC1]

    @ Habilita interrupcao 39 (GPT)
    @ reg1 bit 7 (gpt)

    mov	r0, #(1 << 7)
    str	r0, [r1, #TZIC_ENSET1]

    @ Configure interrupt39 priority as 1
    @ reg9, byte 3

    ldr r0, [r1, #TZIC_PRIORITY9]
    bic r0, r0, #0xFF000000
    mov r2, #1
    orr r0, r0, r2, lsl #24
    str r0, [r1, #TZIC_PRIORITY9]

    @ Configure PRIOMASK as 0
    eor r0, r0, r0
    str r0, [r1, #TZIC_PRIOMASK]

    @ Habilita o controlador de interrupcoes
    mov	r0, #1
    str	r0, [r1, #TZIC_INTCTRL]

    @instrucao msr - habilita interrupcoes
    msr  CPSR_c, #0x13

SET_GPIO:
	@r1 recebe o endereco de GPIO
	ldr r1, =GPIO_BASE

	@define a mascara para os pinos do GPIO (pinos de entrada e saida)
	ldr r0, =GDIR_MASK
	str r0, [r1, #GPIO_GDIR]


SET_STACKS:
	@define a posicao das diferentes pilhas para cada modo



RETURN_TO_USER:
	@retorna para o modo de usuario
	ldr r0, =USER_TEXT

	@muda para modo USER
	msr CPSR_c, #0x10
	@salta para a posicao do inicio do programa do usuario
	bx r0


SYSCALL_HANDLER:





.data

sys_time:
	.word 0

alarms:
	.word 0

call_backs:
	.word 0

@tamanho total das stacks (1024 para cada um dos 4 modos)
STACKS:
    .skip 4096
